{"code":"import { createMsgBeginRedelegate as protoMsgBeginRedelegate, createMsgDelegate as protoMsgDelegate, createMsgUndelegate as protoMsgUndelegate, createMsgWithdrawDelegatorReward as protoeMsgWithdrawDelegatorReward, createMsgWithdrawValidatorCommission as protoMsgWithdrawValidatorCommission, createTransaction, createTransactionWithMultipleMessages, } from '../../../proto';\r\nimport { createEIP712, generateFee, generateMessage, generateMessageWithMultipleTransactions, generateTypes, MSG_DELEGATE_TYPES, createMsgDelegate, MSG_UNDELEGATE_TYPES, createMsgUndelegate, MSG_BEGIN_REDELEGATE_TYPES, createMsgBeginRedelegate, MSG_WITHDRAW_DELEGATOR_REWARD_TYPES, createMsgWithdrawDelegatorReward, MSG_WITHDRAW_VALIDATOR_COMMISSION_TYPES, createMsgWithdrawValidatorCommission, } from '../../../eip712';\r\nexport function createTxMsgDelegate(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_DELEGATE_TYPES);\r\n    var msg = createMsgDelegate(sender.accountAddress, params.validatorAddress, params.amount, params.denom);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var protoMessage = protoMsgDelegate(sender.accountAddress, params.validatorAddress, params.amount, params.denom);\r\n    var tx = createTransaction(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\nexport function createTxMsgBeginRedelegate(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_BEGIN_REDELEGATE_TYPES);\r\n    var msg = createMsgBeginRedelegate(sender.accountAddress, params.validatorSrcAddress, params.validatorDstAddress, params.amount, params.denom);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var protoMessage = protoMsgBeginRedelegate(sender.accountAddress, params.validatorSrcAddress, params.validatorDstAddress, params.amount, params.denom);\r\n    var tx = createTransaction(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\nexport function createTxMsgUndelegate(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_UNDELEGATE_TYPES);\r\n    var msg = createMsgUndelegate(sender.accountAddress, params.validatorAddress, params.amount, params.denom);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var protoMessage = protoMsgUndelegate(sender.accountAddress, params.validatorAddress, params.amount, params.denom);\r\n    var tx = createTransaction(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\nexport function createTxMsgWithdrawDelegatorReward(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_WITHDRAW_DELEGATOR_REWARD_TYPES);\r\n    var msg = createMsgWithdrawDelegatorReward(sender.accountAddress, params.validatorAddress);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var protoMessage = protoeMsgWithdrawDelegatorReward(sender.accountAddress, params.validatorAddress);\r\n    var tx = createTransaction(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\nexport function createTxMsgMultipleWithdrawDelegatorReward(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_WITHDRAW_DELEGATOR_REWARD_TYPES);\r\n    // EIP712\r\n    var msgs = [];\r\n    // Cosmos\r\n    var protoMsgs = [];\r\n    params.validatorAddresses.forEach(function (validator) {\r\n        msgs.push(createMsgWithdrawDelegatorReward(sender.accountAddress, validator));\r\n        protoMsgs.push(protoeMsgWithdrawDelegatorReward(sender.accountAddress, validator));\r\n    });\r\n    var messages = generateMessageWithMultipleTransactions(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msgs);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var tx = createTransactionWithMultipleMessages(protoMsgs, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\nexport function createTxMsgWithdrawValidatorCommission(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_WITHDRAW_VALIDATOR_COMMISSION_TYPES);\r\n    var msg = createMsgWithdrawValidatorCommission(params.validatorAddress);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var protoMessage = protoMsgWithdrawValidatorCommission(params.validatorAddress);\r\n    var tx = createTransaction(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\nexport function createTxMsgMultipleDelegate(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_DELEGATE_TYPES);\r\n    // EIP712\r\n    var msgs = [];\r\n    // Cosmos\r\n    var protoMsgs = [];\r\n    params.values.forEach(function (msgDelegate) {\r\n        msgs.push(createMsgDelegate(sender.accountAddress, msgDelegate.validatorAddress, msgDelegate.amount, msgDelegate.denom));\r\n        protoMsgs.push(protoMsgDelegate(sender.accountAddress, msgDelegate.validatorAddress, msgDelegate.amount, msgDelegate.denom));\r\n    });\r\n    var messages = generateMessageWithMultipleTransactions(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msgs);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var tx = createTransactionWithMultipleMessages(protoMsgs, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\n//# sourceMappingURL=staking.js.map","references":["/Users/steven/work/spidexjs/packages/proto/dist/index.d.ts","/Users/steven/work/spidexjs/packages/eip712/dist/index.d.ts","/Users/steven/work/spidexjs/packages/transactions/src/messages/common.ts"],"map":"{\"version\":3,\"file\":\"staking.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/messages/staking.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/transactions/node_modules/.cache/rollup-plugin-typescript2/placeholder/transactions/src/messages/staking.d.ts","writeByteOrderMark":false,"text":"import { Chain, Fee, Sender } from './common';\r\nexport interface MsgDelegateParams {\r\n    validatorAddress: string;\r\n    amount: string;\r\n    denom: string;\r\n}\r\nexport declare function createTxMsgDelegate(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgDelegateParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\nexport interface MsgBeginRedelegateParams {\r\n    validatorSrcAddress: string;\r\n    validatorDstAddress: string;\r\n    amount: string;\r\n    denom: string;\r\n}\r\nexport declare function createTxMsgBeginRedelegate(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgBeginRedelegateParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\nexport interface MsgUndelegateParams {\r\n    validatorAddress: string;\r\n    amount: string;\r\n    denom: string;\r\n}\r\nexport declare function createTxMsgUndelegate(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgUndelegateParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\nexport interface MsgWithdrawDelegatorRewardParams {\r\n    validatorAddress: string;\r\n}\r\nexport declare function createTxMsgWithdrawDelegatorReward(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgWithdrawDelegatorRewardParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\nexport interface MsgMultipleWithdrawDelegatorRewardParams {\r\n    validatorAddresses: string[];\r\n}\r\nexport declare function createTxMsgMultipleWithdrawDelegatorReward(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgMultipleWithdrawDelegatorRewardParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\nexport interface MsgWithdrawValidatorCommissionParams {\r\n    validatorAddress: string;\r\n}\r\nexport declare function createTxMsgWithdrawValidatorCommission(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgWithdrawValidatorCommissionParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\nexport interface MsgMultipleDelegateParams {\r\n    values: MsgDelegateParams[];\r\n}\r\nexport declare function createTxMsgMultipleDelegate(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MsgMultipleDelegateParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\n"}}
