{"code":"import { createIBCMsgTransfer as protoCreateIBCMsgTransfer, createTransaction, } from '../../../proto';\r\nimport { createEIP712, generateFee, generateMessage, generateTypes, createIBCMsgTransfer, IBC_MSG_TRANSFER_TYPES, } from '../../../eip712';\r\nexport function createTxIBCMsgTransfer(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(IBC_MSG_TRANSFER_TYPES);\r\n    var msg = createIBCMsgTransfer(params.receiver, sender.accountAddress, params.sourceChannel, params.sourcePort, params.revisionHeight, params.revisionNumber, params.timeoutTimestamp, params.amount, params.denom);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var msgCosmos = protoCreateIBCMsgTransfer(params.sourcePort, params.sourceChannel, params.amount, params.denom, sender.accountAddress, params.receiver, params.revisionNumber, params.revisionHeight, params.timeoutTimestamp);\r\n    var tx = createTransaction(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\n//# sourceMappingURL=ibcMsgTransfer.js.map","references":["/Users/steven/work/spidexjs/packages/proto/dist/index.d.ts","/Users/steven/work/spidexjs/packages/eip712/dist/index.d.ts","/Users/steven/work/spidexjs/packages/transactions/src/messages/common.ts"],"map":"{\"version\":3,\"file\":\"ibcMsgTransfer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/messages/ibcMsgTransfer.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EACL,oBAAoB,IAAI,yBAAyB,EACjD,iBAAiB,GAClB,MAAM,gBAAgB,CAAA;AAEvB,OAAO,EACL,YAAY,EACZ,WAAW,EACX,eAAe,EACf,aAAa,EACb,oBAAoB,EACpB,sBAAsB,GACvB,MAAM,iBAAiB,CAAA;AAmBxB,MAAM,UAAU,sBAAsB,CACpC,KAAY,EACZ,MAAc,EACd,GAAQ,EACR,IAAY,EACZ,MAA6B;IAE7B,SAAS;IACT,IAAM,SAAS,GAAG,WAAW,CAC3B,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,KAAK,EACT,GAAG,CAAC,GAAG,EACP,MAAM,CAAC,cAAc,CACtB,CAAA;IACD,IAAM,KAAK,GAAG,aAAa,CAAC,sBAAsB,CAAC,CAAA;IAEnD,IAAM,GAAG,GAAG,oBAAoB,CAC9B,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,KAAK,CACb,CAAA;IACD,IAAM,QAAQ,GAAG,eAAe,CAC9B,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,EAC/B,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAC1B,KAAK,CAAC,aAAa,EACnB,IAAI,EACJ,SAAS,EACT,GAAG,CACJ,CAAA;IACD,IAAM,SAAS,GAAG,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;IAE9D,SAAS;IACT,IAAM,SAAS,GAAG,yBAAyB,CACzC,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,aAAa,EACpB,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,gBAAgB,CACxB,CAAA;IACD,IAAM,EAAE,GAAG,iBAAiB,CAC1B,SAAS,EACT,IAAI,EACJ,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,KAAK,EACT,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,EACrB,YAAY,EACZ,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,aAAa,EACpB,KAAK,CAAC,aAAa,CACpB,CAAA;IAED,OAAO;QACL,UAAU,EAAE,EAAE,CAAC,UAAU;QACzB,WAAW,EAAE,EAAE,CAAC,WAAW;QAC3B,SAAS,WAAA;KACV,CAAA;AACH,CAAC\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/transactions/node_modules/.cache/rollup-plugin-typescript2/placeholder/transactions/src/messages/ibcMsgTransfer.d.ts","writeByteOrderMark":false,"text":"import { Chain, Fee, Sender } from './common';\r\nexport interface MessageIBCMsgTransfer {\r\n    sourcePort: string;\r\n    sourceChannel: string;\r\n    amount: string;\r\n    denom: string;\r\n    receiver: string;\r\n    revisionNumber: number;\r\n    revisionHeight: number;\r\n    timeoutTimestamp: string;\r\n}\r\nexport declare function createTxIBCMsgTransfer(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MessageIBCMsgTransfer): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\n"}}
