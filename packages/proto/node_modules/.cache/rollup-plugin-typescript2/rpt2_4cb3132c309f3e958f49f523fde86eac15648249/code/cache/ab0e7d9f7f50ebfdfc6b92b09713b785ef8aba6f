{"code":"import { Keccak } from 'sha3';\r\nimport * as tx from '../proto/cosmos/tx/v1beta1/tx';\r\nimport * as signing from '../proto/cosmos/tx/signing/v1beta1/signing';\r\nimport * as coin from '../proto/cosmos/base/v1beta1/coin';\r\nimport * as eth from '../proto/ethermint/crypto/v1/ethsecp256k1/keys';\r\nimport * as secp from '../proto/cosmos/crypto/secp256k1/keys';\r\nimport { createAnyMessage } from '../messages/utils';\r\nexport var SIGN_DIRECT = signing.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_DIRECT;\r\nexport var LEGACY_AMINO = signing.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\r\nexport var protoTxNamespace;\r\n(function (protoTxNamespace) {\r\n    /* global cosmos */\r\n    /* eslint no-undef: \"error\" */\r\n    protoTxNamespace.txn = tx.cosmos.tx.v1beta1;\r\n})(protoTxNamespace || (protoTxNamespace = {}));\r\n// TODO: messages should be typed as proto message. A types package is needed to export that type without problems\r\nexport function createBodyWithMultipleMessages(messages, memo) {\r\n    var content = [];\r\n    messages.forEach(function (message) {\r\n        content.push(createAnyMessage(message));\r\n    });\r\n    return new tx.cosmos.tx.v1beta1.TxBody({\r\n        messages: content,\r\n        memo: memo,\r\n    });\r\n}\r\nexport function createBody(message, memo) {\r\n    return createBodyWithMultipleMessages([message], memo);\r\n}\r\nexport function createFee(fee, denom, gasLimit) {\r\n    return new tx.cosmos.tx.v1beta1.Fee({\r\n        amount: [\r\n            new coin.cosmos.base.v1beta1.Coin({\r\n                denom: denom,\r\n                amount: fee,\r\n            }),\r\n        ],\r\n        gas_limit: gasLimit,\r\n    });\r\n}\r\nexport function createSignerInfo(algo, publicKey, sequence, mode) {\r\n    var pubkey;\r\n    // NOTE: secp256k1 is going to be removed from evmos\r\n    if (algo === 'secp256k1') {\r\n        pubkey = {\r\n            message: new secp.cosmos.crypto.secp256k1.PubKey({\r\n                key: publicKey,\r\n            }),\r\n            path: 'cosmos.crypto.secp256k1.PubKey',\r\n        };\r\n    }\r\n    else {\r\n        // NOTE: assume ethsecp256k1 by default because after mainnet is the only one that is going to be supported\r\n        pubkey = {\r\n            message: new eth.ethermint.crypto.v1.ethsecp256k1.PubKey({\r\n                key: publicKey,\r\n            }),\r\n            path: 'ethermint.crypto.v1.ethsecp256k1.PubKey',\r\n        };\r\n    }\r\n    var signerInfo = new tx.cosmos.tx.v1beta1.SignerInfo({\r\n        public_key: createAnyMessage(pubkey),\r\n        mode_info: new tx.cosmos.tx.v1beta1.ModeInfo({\r\n            single: new tx.cosmos.tx.v1beta1.ModeInfo.Single({\r\n                mode: mode,\r\n            }),\r\n        }),\r\n        sequence: sequence,\r\n    });\r\n    return signerInfo;\r\n}\r\nexport function createAuthInfo(signerInfo, fee) {\r\n    return new tx.cosmos.tx.v1beta1.AuthInfo({\r\n        signer_infos: [signerInfo],\r\n        fee: fee,\r\n    });\r\n}\r\nexport function createSigDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\r\n    return new tx.cosmos.tx.v1beta1.SignDoc({\r\n        body_bytes: bodyBytes,\r\n        auth_info_bytes: authInfoBytes,\r\n        chain_id: chainId,\r\n        account_number: accountNumber,\r\n    });\r\n}\r\n// TODO: messages should be typed as proto message. A types package is needed to export that type without problems\r\nexport function createTransactionWithMultipleMessages(messages, memo, fee, denom, gasLimit, algo, pubKey, sequence, accountNumber, chainId) {\r\n    var body = createBodyWithMultipleMessages(messages, memo);\r\n    var feeMessage = createFee(fee, denom, gasLimit);\r\n    var pubKeyDecoded = Buffer.from(pubKey, 'base64');\r\n    // AMINO\r\n    var signInfoAmino = createSignerInfo(algo, new Uint8Array(pubKeyDecoded), sequence, LEGACY_AMINO);\r\n    var authInfoAmino = createAuthInfo(signInfoAmino, feeMessage);\r\n    var signDocAmino = createSigDoc(body.serializeBinary(), authInfoAmino.serializeBinary(), chainId, accountNumber);\r\n    var hashAmino = new Keccak(256);\r\n    hashAmino.update(Buffer.from(signDocAmino.serializeBinary()));\r\n    var toSignAmino = hashAmino.digest('binary');\r\n    // SignDirect\r\n    var signInfoDirect = createSignerInfo(algo, new Uint8Array(pubKeyDecoded), sequence, SIGN_DIRECT);\r\n    var authInfoDirect = createAuthInfo(signInfoDirect, feeMessage);\r\n    var signDocDirect = createSigDoc(body.serializeBinary(), authInfoDirect.serializeBinary(), chainId, accountNumber);\r\n    var hashDirect = new Keccak(256);\r\n    hashDirect.update(Buffer.from(signDocDirect.serializeBinary()));\r\n    var toSignDirect = hashDirect.digest('binary');\r\n    return {\r\n        legacyAmino: {\r\n            body: body,\r\n            authInfo: authInfoAmino,\r\n            signBytes: toSignAmino.toString('base64'),\r\n        },\r\n        signDirect: {\r\n            body: body,\r\n            authInfo: authInfoDirect,\r\n            signBytes: toSignDirect.toString('base64'),\r\n        },\r\n    };\r\n}\r\nexport function createTransaction(message, memo, fee, denom, gasLimit, algo, pubKey, sequence, accountNumber, chainId) {\r\n    return createTransactionWithMultipleMessages([message], memo, fee, denom, gasLimit, algo, pubKey, sequence, accountNumber, chainId);\r\n}\r\n//# sourceMappingURL=transaction.js.map","references":["/Users/steven/work/spidexjs/node_modules/sha3/index.d.ts","/Users/steven/work/spidexjs/packages/proto/proto/cosmos/tx/v1beta1/tx.ts","/Users/steven/work/spidexjs/packages/proto/proto/cosmos/tx/signing/v1beta1/signing.ts","/Users/steven/work/spidexjs/packages/proto/proto/cosmos/base/v1beta1/coin.ts","/Users/steven/work/spidexjs/packages/proto/proto/ethermint/crypto/v1/ethsecp256k1/keys.ts","/Users/steven/work/spidexjs/packages/proto/proto/cosmos/crypto/secp256k1/keys.ts","/Users/steven/work/spidexjs/packages/proto/messages/utils.ts"],"map":"{\"version\":3,\"file\":\"transaction.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../transaction/transaction.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/proto/node_modules/.cache/rollup-plugin-typescript2/placeholder/transaction/transaction.d.ts","writeByteOrderMark":false,"text":"import * as tx from '../proto/cosmos/tx/v1beta1/tx';\r\nimport * as signing from '../proto/cosmos/tx/signing/v1beta1/signing';\r\nexport declare const SIGN_DIRECT = signing.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_DIRECT;\r\nexport declare const LEGACY_AMINO = signing.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\r\nexport declare namespace protoTxNamespace {\r\n    export import txn = tx.cosmos.tx.v1beta1;\r\n}\r\nexport declare function createBodyWithMultipleMessages(messages: any[], memo: string): tx.cosmos.tx.v1beta1.TxBody;\r\nexport declare function createBody(message: any, memo: string): tx.cosmos.tx.v1beta1.TxBody;\r\nexport declare function createFee(fee: string, denom: string, gasLimit: number): tx.cosmos.tx.v1beta1.Fee;\r\nexport declare function createSignerInfo(algo: string, publicKey: Uint8Array, sequence: number, mode: number): tx.cosmos.tx.v1beta1.SignerInfo;\r\nexport declare function createAuthInfo(signerInfo: tx.cosmos.tx.v1beta1.SignerInfo, fee: tx.cosmos.tx.v1beta1.Fee): tx.cosmos.tx.v1beta1.AuthInfo;\r\nexport declare function createSigDoc(bodyBytes: Uint8Array, authInfoBytes: Uint8Array, chainId: string, accountNumber: number): tx.cosmos.tx.v1beta1.SignDoc;\r\nexport declare function createTransactionWithMultipleMessages(messages: any, memo: string, fee: string, denom: string, gasLimit: number, algo: string, pubKey: string, sequence: number, accountNumber: number, chainId: string): {\r\n    legacyAmino: {\r\n        body: tx.cosmos.tx.v1beta1.TxBody;\r\n        authInfo: tx.cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    signDirect: {\r\n        body: tx.cosmos.tx.v1beta1.TxBody;\r\n        authInfo: tx.cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n};\r\nexport declare function createTransaction(message: any, memo: string, fee: string, denom: string, gasLimit: number, algo: string, pubKey: string, sequence: number, accountNumber: number, chainId: string): {\r\n    legacyAmino: {\r\n        body: tx.cosmos.tx.v1beta1.TxBody;\r\n        authInfo: tx.cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    signDirect: {\r\n        body: tx.cosmos.tx.v1beta1.TxBody;\r\n        authInfo: tx.cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n};\r\n"}}
