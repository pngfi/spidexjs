{"code":"import { isValidChecksumAddress, stripHexPrefix, toChecksumAddress, } from 'crypto-addr-codec';\r\nimport { bech32 } from 'bech32';\r\nfunction makeChecksummedHexDecoder(chainId) {\r\n    return function (data) {\r\n        var stripped = stripHexPrefix(data);\r\n        if (!isValidChecksumAddress(data, chainId || null) &&\r\n            stripped !== stripped.toLowerCase() &&\r\n            stripped !== stripped.toUpperCase()) {\r\n            throw Error('Invalid address checksum');\r\n        }\r\n        return Buffer.from(stripHexPrefix(data), 'hex');\r\n    };\r\n}\r\nfunction makeChecksummedHexEncoder(chainId) {\r\n    return function (data) {\r\n        return toChecksumAddress(data.toString('hex'), chainId || null);\r\n    };\r\n}\r\nvar hexChecksumChain = function (name, chainId) { return ({\r\n    decoder: makeChecksummedHexDecoder(chainId),\r\n    encoder: makeChecksummedHexEncoder(chainId),\r\n    name: name,\r\n}); };\r\nexport var ETH = hexChecksumChain('ETH');\r\nfunction makeBech32Encoder(prefix) {\r\n    return function (data) { return bech32.encode(prefix, bech32.toWords(data)); };\r\n}\r\nfunction makeBech32Decoder(currentPrefix) {\r\n    return function (data) {\r\n        var _a = bech32.decode(data), prefix = _a.prefix, words = _a.words;\r\n        if (prefix !== currentPrefix) {\r\n            throw Error('Unrecognised address format');\r\n        }\r\n        return Buffer.from(bech32.fromWords(words));\r\n    };\r\n}\r\nvar bech32Chain = function (name, prefix) { return ({\r\n    decoder: makeBech32Decoder(prefix),\r\n    encoder: makeBech32Encoder(prefix),\r\n    name: name,\r\n}); };\r\nexport var ETHERMINT = bech32Chain('ETHERMINT', 'ethm');\r\nexport var ethToEthermint = function (ethAddress) {\r\n    var data = ETH.decoder(ethAddress);\r\n    return ETHERMINT.encoder(data);\r\n};\r\nexport var ethermintToEth = function (ethermintAddress) {\r\n    var data = ETHERMINT.decoder(ethermintAddress);\r\n    return ETH.encoder(data);\r\n};\r\n// Ethermint/spidexs\r\nexport var SPIDEX = bech32Chain('SPX', 'spx');\r\nexport var ethToSpx = function (ethAddress) {\r\n    var data = ETH.decoder(ethAddress);\r\n    return SPIDEX.encoder(data);\r\n};\r\nexport var spxToEth = function (spxAddress) {\r\n    var data = SPIDEX.decoder(spxAddress);\r\n    return ETH.encoder(data);\r\n};\r\nexport var OSMOSIS = bech32Chain('OSMOSIS', 'osmo');\r\nexport var ethToOsmosis = function (ethAddress) {\r\n    var data = ETH.decoder(ethAddress);\r\n    return OSMOSIS.encoder(data);\r\n};\r\nexport var osmosisToEth = function (address) {\r\n    var data = OSMOSIS.decoder(address);\r\n    return ETH.encoder(data);\r\n};\r\nexport var COSMOS = bech32Chain('COSMOS', 'cosmos');\r\nexport var ethToCosmos = function (ethAddress) {\r\n    var data = ETH.decoder(ethAddress);\r\n    return COSMOS.encoder(data);\r\n};\r\nexport var cosmosToEth = function (Address) {\r\n    var data = COSMOS.decoder(Address);\r\n    return ETH.encoder(data);\r\n};\r\nexport var KYVE = bech32Chain('KORELLIA', 'kyve');\r\nexport var ethToKyve = function (ethAddress) {\r\n    var data = ETH.decoder(ethAddress);\r\n    return KYVE.encoder(data);\r\n};\r\nexport var kyveToEth = function (kyveAddress) {\r\n    var data = KYVE.decoder(kyveAddress);\r\n    return ETH.encoder(data);\r\n};\r\n//# sourceMappingURL=converter.js.map","references":["/Users/steven/work/spidexjs/node_modules/crypto-addr-codec/dist/index.js","/Users/steven/work/spidexjs/node_modules/bech32/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"converter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/converter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/address-converter/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/converter.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nexport declare const ETH: {\r\n    decoder: (data: string) => Buffer;\r\n    encoder: (data: Buffer) => string;\r\n    name: string;\r\n};\r\nexport declare const ETHERMINT: {\r\n    decoder: (data: string) => Buffer;\r\n    encoder: (data: Buffer) => string;\r\n    name: string;\r\n};\r\nexport declare const ethToEthermint: (ethAddress: string) => string;\r\nexport declare const ethermintToEth: (ethermintAddress: string) => string;\r\nexport declare const SPIDEX: {\r\n    decoder: (data: string) => Buffer;\r\n    encoder: (data: Buffer) => string;\r\n    name: string;\r\n};\r\nexport declare const ethToSpx: (ethAddress: string) => string;\r\nexport declare const spxToEth: (spxAddress: string) => string;\r\nexport declare const OSMOSIS: {\r\n    decoder: (data: string) => Buffer;\r\n    encoder: (data: Buffer) => string;\r\n    name: string;\r\n};\r\nexport declare const ethToOsmosis: (ethAddress: string) => string;\r\nexport declare const osmosisToEth: (address: string) => string;\r\nexport declare const COSMOS: {\r\n    decoder: (data: string) => Buffer;\r\n    encoder: (data: Buffer) => string;\r\n    name: string;\r\n};\r\nexport declare const ethToCosmos: (ethAddress: string) => string;\r\nexport declare const cosmosToEth: (Address: string) => string;\r\nexport declare const KYVE: {\r\n    decoder: (data: string) => Buffer;\r\n    encoder: (data: Buffer) => string;\r\n    name: string;\r\n};\r\nexport declare const ethToKyve: (ethAddress: string) => string;\r\nexport declare const kyveToEth: (kyveAddress: string) => string;\r\n"}}
