{"code":"import { parseChainId } from './utils';\r\nimport { MSG_VOTE_TYPES } from '../messages/gov';\r\nimport { MSG_SEND_TYPES } from '../messages/msgsend';\r\nimport { generateTypes, createEIP712 } from '../messages/base';\r\nimport { MSG_DELEGATE_TYPES } from '../messages/staking';\r\nexport var MSG_TYPES = {\r\n    MSG_SEND: 'cosmos-sdk/MsgSend',\r\n    MSG_VOTE: 'cosmos-sdk/MsgVote',\r\n    MSG_DELEGATE: 'cosmos-sdk/MsgDelegate',\r\n};\r\n// Get the feePayer from the message, using the message structure.\r\n// This is required to provide the feePayer in the EIP712 object, and\r\n// because Amino JS representations are in JSON and have no better interface.\r\n// Throws on error.\r\nexport function getFeePayerFromMsg(msg) {\r\n    switch (msg.type) {\r\n        case MSG_TYPES.MSG_SEND:\r\n            return msg.value.from_address;\r\n        case MSG_TYPES.MSG_VOTE:\r\n            return msg.value.voter;\r\n        case MSG_TYPES.MSG_DELEGATE:\r\n            return msg.value.delegator_address;\r\n        default:\r\n            throw new Error('Unsupported message type');\r\n    }\r\n}\r\n// Return the SignDoc post-formatting. Throws on error.\r\nfunction formatSignDoc(signDoc) {\r\n    var signDocCpy = {};\r\n    Object.assign(signDocCpy, signDoc);\r\n    // Fill in the feePayer if the field is blank or unset\r\n    if (!Object.keys(signDoc.fee).includes('feePayer') ||\r\n        signDoc.fee.feePayer === '') {\r\n        signDocCpy.fee.feePayer = getFeePayerFromMsg(signDoc.msgs[0]);\r\n    }\r\n    return signDocCpy;\r\n}\r\n// Generate EIP-712 types for the given message\r\nexport function eip712MessageType(msg) {\r\n    switch (msg.type) {\r\n        case MSG_TYPES.MSG_SEND:\r\n            return generateTypes(MSG_SEND_TYPES);\r\n        case MSG_TYPES.MSG_VOTE:\r\n            return generateTypes(MSG_VOTE_TYPES);\r\n        case MSG_TYPES.MSG_DELEGATE:\r\n            return generateTypes(MSG_DELEGATE_TYPES);\r\n        default:\r\n            throw new Error('Unsupported message type in SignDoc');\r\n    }\r\n}\r\n// Decodes the AminoSignDoc to EIP712 types. Throws on error.\r\nexport function decodeAminoSignDoc(bytes) {\r\n    var rawSignDoc = JSON.parse(Buffer.from(bytes).toString());\r\n    // Enforce single-message signing for now\r\n    if (rawSignDoc.msgs.length !== 1) {\r\n        throw new Error(\"Expected single message in Amino SignDoc but received \".concat(rawSignDoc.msgs.length, \".\"));\r\n    }\r\n    // Format SignDoc to match EIP-712 types\r\n    var signDoc = formatSignDoc(rawSignDoc);\r\n    var chainId = signDoc.chain_id;\r\n    var msg = signDoc.msgs[0];\r\n    var type = eip712MessageType(msg);\r\n    return createEIP712(type, parseChainId(chainId), signDoc);\r\n}\r\n//# sourceMappingURL=decodeAmino.js.map","references":["/Users/steven/work/spidexjs/packages/eip712/src/encoding/utils.ts","/Users/steven/work/spidexjs/packages/eip712/src/messages/gov.ts","/Users/steven/work/spidexjs/packages/eip712/src/messages/msgsend.ts","/Users/steven/work/spidexjs/packages/eip712/src/messages/base.ts","/Users/steven/work/spidexjs/packages/eip712/src/messages/staking.ts"],"map":"{\"version\":3,\"file\":\"decodeAmino.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/encoding/decodeAmino.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAA;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAA;AAChD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAA;AACpD,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAA;AAC9D,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAA;AAExD,MAAM,CAAC,IAAM,SAAS,GAAG;IACvB,QAAQ,EAAE,oBAAoB;IAC9B,QAAQ,EAAE,oBAAoB;IAC9B,YAAY,EAAE,wBAAwB;CACvC,CAAA;AAED,kEAAkE;AAClE,qEAAqE;AACrE,6EAA6E;AAC7E,mBAAmB;AACnB,MAAM,UAAU,kBAAkB,CAAC,GAAQ;IACzC,QAAQ,GAAG,CAAC,IAAI,EAAE;QAChB,KAAK,SAAS,CAAC,QAAQ;YACrB,OAAO,GAAG,CAAC,KAAK,CAAC,YAAY,CAAA;QAC/B,KAAK,SAAS,CAAC,QAAQ;YACrB,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAA;QACxB,KAAK,SAAS,CAAC,YAAY;YACzB,OAAO,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAA;QACpC;YACE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;KAC9C;AACH,CAAC;AAED,uDAAuD;AACvD,SAAS,aAAa,CAAC,OAAY;IACjC,IAAM,UAAU,GAAQ,EAAE,CAAA;IAC1B,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;IAElC,sDAAsD;IACtD,IACE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC9C,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,EAC3B;QACA,UAAU,CAAC,GAAG,CAAC,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KAC9D;IAED,OAAO,UAAU,CAAA;AACnB,CAAC;AAED,+CAA+C;AAC/C,MAAM,UAAU,iBAAiB,CAAC,GAAQ;IACxC,QAAQ,GAAG,CAAC,IAAI,EAAE;QAChB,KAAK,SAAS,CAAC,QAAQ;YACrB,OAAO,aAAa,CAAC,cAAc,CAAC,CAAA;QACtC,KAAK,SAAS,CAAC,QAAQ;YACrB,OAAO,aAAa,CAAC,cAAc,CAAC,CAAA;QACtC,KAAK,SAAS,CAAC,YAAY;YACzB,OAAO,aAAa,CAAC,kBAAkB,CAAC,CAAA;QAC1C;YACE,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;KACzD;AACH,CAAC;AAED,6DAA6D;AAC7D,MAAM,UAAU,kBAAkB,CAAC,KAAiB;IAClD,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;IAE5D,yCAAyC;IACzC,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CACb,gEAAyD,UAAU,CAAC,IAAI,CAAC,MAAM,MAAG,CACnF,CAAA;KACF;IAED,wCAAwC;IACxC,IAAM,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,CAAA;IACzC,IAAM,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAA;IAEhC,IAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC3B,IAAM,IAAI,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAA;IAEnC,OAAO,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAA;AAC3D,CAAC\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/eip712/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/encoding/decodeAmino.d.ts","writeByteOrderMark":false,"text":"export declare const MSG_TYPES: {\r\n    MSG_SEND: string;\r\n    MSG_VOTE: string;\r\n    MSG_DELEGATE: string;\r\n};\r\nexport declare function getFeePayerFromMsg(msg: any): any;\r\nexport declare function eip712MessageType(msg: any): {\r\n    EIP712Domain: {\r\n        name: string;\r\n        type: string;\r\n    }[];\r\n    Tx: {\r\n        name: string;\r\n        type: string;\r\n    }[];\r\n    Fee: {\r\n        name: string;\r\n        type: string;\r\n    }[];\r\n    Coin: {\r\n        name: string;\r\n        type: string;\r\n    }[];\r\n    Msg: {\r\n        name: string;\r\n        type: string;\r\n    }[];\r\n};\r\nexport declare function decodeAminoSignDoc(bytes: Uint8Array): {\r\n    types: object;\r\n    primaryType: string;\r\n    domain: {\r\n        name: string;\r\n        version: string;\r\n        chainId: number;\r\n        verifyingContract: string;\r\n        salt: string;\r\n    };\r\n    message: object;\r\n};\r\n"}}
