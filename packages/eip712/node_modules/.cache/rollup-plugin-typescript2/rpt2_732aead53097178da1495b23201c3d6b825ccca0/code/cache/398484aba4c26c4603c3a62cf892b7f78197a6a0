{"code":"import { Registry } from '@cosmjs/proto-signing';\r\nimport { AuthInfo, SignDoc, TxBody } from 'cosmjs-types/cosmos/tx/v1beta1/tx';\r\nimport { MsgVote } from 'cosmjs-types/cosmos/gov/v1beta1/tx';\r\nimport { MsgDelegate } from 'cosmjs-types/cosmos/staking/v1beta1/tx';\r\nimport { parseChainId } from './utils';\r\nimport { MSG_TYPES, eip712MessageType, getFeePayerFromMsg } from './decodeAmino';\r\nimport { createEIP712, generateFee, generateMessage } from '../messages/base';\r\nvar Long = require('long');\r\nvar isLong = require('long').isLong;\r\nexport var PROTO_MSG_TYPES = {\r\n    MSG_SEND: '/cosmos.bank.v1beta1.MsgSend',\r\n    MSG_VOTE: '/cosmos.gov.v1beta1.MsgVote',\r\n    MSG_DELEGATE: '/cosmos.staking.v1beta1.MsgDelegate',\r\n};\r\nfunction protobufTypeUrlToAminoType(typeUrl) {\r\n    switch (typeUrl) {\r\n        case PROTO_MSG_TYPES.MSG_SEND:\r\n            return MSG_TYPES.MSG_SEND;\r\n        case PROTO_MSG_TYPES.MSG_VOTE:\r\n            return MSG_TYPES.MSG_VOTE;\r\n        case PROTO_MSG_TYPES.MSG_DELEGATE:\r\n            return MSG_TYPES.MSG_DELEGATE;\r\n        default:\r\n            throw new Error('Invalid Protobuf message type url received');\r\n    }\r\n}\r\n// Convert a Protobuf Message to its corresponding Amino representation since\r\n// EIP-712 types require messages to be in Amino form.\r\nfunction convertProtobufMsgToAminoMsg(obj) {\r\n    // Return primitive types\r\n    if (typeof obj !== 'object') {\r\n        return obj;\r\n    }\r\n    // Format all elements within the array\r\n    if (Array.isArray(obj)) {\r\n        var formattedArray_1 = [];\r\n        obj.forEach(function (el) {\r\n            formattedArray_1.push(convertProtobufMsgToAminoMsg(el));\r\n        });\r\n        return formattedArray_1;\r\n    }\r\n    // Convert Long objects to string, since Longs are not recognized\r\n    // by EIP-712 types.\r\n    if (isLong(obj)) {\r\n        return new Long(obj).toString();\r\n    }\r\n    // Recursively convert camel case instances to snake case to match expected fields\r\n    var camelToSnakeCase = function (str) {\r\n        return str.replace(/[A-Z]/g, function (letter) { return \"_\".concat(letter.toLowerCase()); });\r\n    };\r\n    var formattedObj = {};\r\n    Object.keys(obj).forEach(function (key) {\r\n        formattedObj[camelToSnakeCase(key)] = convertProtobufMsgToAminoMsg(obj[key]);\r\n    });\r\n    return formattedObj;\r\n}\r\n// Generate Protobuf registry\r\nfunction eip712ProtobufRegistry() {\r\n    var registry = new Registry();\r\n    // Registry includes MSG_SEND by default\r\n    registry.register(PROTO_MSG_TYPES.MSG_VOTE, MsgVote);\r\n    registry.register(PROTO_MSG_TYPES.MSG_DELEGATE, MsgDelegate);\r\n    return registry;\r\n}\r\n// Decodes the ProtobufSignDoc to EIP712. Throws on error.\r\nexport function decodeProtobufSignDoc(bytes) {\r\n    var _a, _b;\r\n    // Decode Protobuf tx\r\n    var registry = eip712ProtobufRegistry();\r\n    var signDoc = SignDoc.decode(bytes);\r\n    var txBody = TxBody.decode(signDoc.bodyBytes);\r\n    var authInfo = AuthInfo.decode(signDoc.authInfoBytes);\r\n    // Enforce single message for now\r\n    if (txBody.messages.length !== 1) {\r\n        throw new Error(\"Expected single message in Protobuf SignDoc but received \".concat(txBody.messages.length, \".\"));\r\n    }\r\n    var msgBytes = txBody.messages[0];\r\n    // Enforce single signer for now\r\n    if (authInfo.signerInfos.length !== 1) {\r\n        throw new Error(\"Expected single signer in Protobuf SignDoc but received \".concat(authInfo.signerInfos.length, \".\"));\r\n    }\r\n    var signer = authInfo.signerInfos[0];\r\n    // Enforce presence of fee\r\n    if (!authInfo.fee) {\r\n        throw new Error('Expected fee object to be included in payload, got undefined');\r\n    }\r\n    // Enforce single fee\r\n    if (authInfo.fee.amount.length !== 1) {\r\n        throw new Error(\"Expected single fee in Protobuf SignDoc but received \".concat((_a = authInfo.fee) === null || _a === void 0 ? void 0 : _a.amount.length));\r\n    }\r\n    var amount = authInfo.fee.amount[0];\r\n    // Parse SignDoc fields\r\n    var accountNumber = signDoc.accountNumber.toString();\r\n    var sequence = signer.sequence.toString();\r\n    var chainId = signDoc.chainId;\r\n    var memo = txBody.memo;\r\n    // Decode message using registry\r\n    var protoMsg = registry.decode(msgBytes);\r\n    // Convert Protobuf message to expected Amino type\r\n    var aminoMsg = {\r\n        type: protobufTypeUrlToAminoType(msgBytes.typeUrl),\r\n        value: convertProtobufMsgToAminoMsg(protoMsg),\r\n    };\r\n    // Use the feePayer from the message if unset in body\r\n    var feePayer = (_b = authInfo.fee) === null || _b === void 0 ? void 0 : _b.payer;\r\n    if (!feePayer || feePayer === '') {\r\n        feePayer = getFeePayerFromMsg(aminoMsg);\r\n    }\r\n    var gasLimit = authInfo.fee.gasLimit.toString();\r\n    var fee = generateFee(amount.amount, amount.denom, gasLimit, feePayer);\r\n    var type = eip712MessageType(aminoMsg);\r\n    var eip712Tx = generateMessage(accountNumber, sequence, chainId, memo, fee, aminoMsg);\r\n    return createEIP712(type, parseChainId(chainId), eip712Tx);\r\n}\r\n//# sourceMappingURL=decodeProtobuf.js.map","references":["/Users/steven/work/spidexjs/node_modules/@cosmjs/proto-signing/build/index.d.ts","/Users/steven/work/spidexjs/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.d.ts","/Users/steven/work/spidexjs/node_modules/cosmjs-types/cosmos/gov/v1beta1/tx.d.ts","/Users/steven/work/spidexjs/node_modules/cosmjs-types/cosmos/staking/v1beta1/tx.d.ts","/Users/steven/work/spidexjs/packages/eip712/src/encoding/utils.ts","/Users/steven/work/spidexjs/packages/eip712/src/encoding/decodeAmino.ts","/Users/steven/work/spidexjs/packages/eip712/src/messages/base.ts","/Users/steven/work/spidexjs/node_modules/long/index.d.ts","/Users/steven/work/spidexjs/node_modules/long/index.d.ts"],"map":"{\"version\":3,\"file\":\"decodeProtobuf.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/encoding/decodeProtobuf.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/eip712/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/encoding/decodeProtobuf.d.ts","writeByteOrderMark":false,"text":"export declare const PROTO_MSG_TYPES: {\r\n    MSG_SEND: string;\r\n    MSG_VOTE: string;\r\n    MSG_DELEGATE: string;\r\n};\r\nexport declare function decodeProtobufSignDoc(bytes: Uint8Array): {\r\n    types: object;\r\n    primaryType: string;\r\n    domain: {\r\n        name: string;\r\n        version: string;\r\n        chainId: number;\r\n        verifyingContract: string;\r\n        salt: string;\r\n    };\r\n    message: object;\r\n};\r\n"}}
