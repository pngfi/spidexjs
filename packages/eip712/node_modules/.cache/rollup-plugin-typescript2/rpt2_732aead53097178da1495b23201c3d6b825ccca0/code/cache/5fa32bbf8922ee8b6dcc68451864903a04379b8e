{"code":"import { SignTypedDataVersion, TypedDataUtils } from '@metamask/eth-sig-util';\r\nimport { decodeAminoSignDoc } from './decodeAmino';\r\nimport { decodeProtobufSignDoc } from './decodeProtobuf';\r\n// Decode Amino StdSignDoc or Protobuf SignDoc bytes into the corresponding\r\n// EIP-712 TypedData representation. Throws on errors.\r\nexport function decodeSignDocToTypedData(bytes) {\r\n    var eip712;\r\n    var aminoDecodeErr;\r\n    var protoDecodeErr;\r\n    try {\r\n        eip712 = decodeAminoSignDoc(bytes);\r\n    }\r\n    catch (e) {\r\n        aminoDecodeErr = e;\r\n    }\r\n    try {\r\n        eip712 = decodeProtobufSignDoc(bytes);\r\n    }\r\n    catch (e) {\r\n        protoDecodeErr = e;\r\n    }\r\n    // Throw if neither decoding was successful\r\n    if (!eip712) {\r\n        throw new Error(\"Could not cast bytes to either StdSignDoc or SignDoc:\\n\\n                    Amino: \".concat(aminoDecodeErr === null || aminoDecodeErr === void 0 ? void 0 : aminoDecodeErr.message, \"\\n\\n                    Protobuf: \").concat(protoDecodeErr === null || protoDecodeErr === void 0 ? void 0 : protoDecodeErr.message, \"\\n\"));\r\n    }\r\n    return eip712;\r\n}\r\n// Return the hashed V4 EIP-712 domain and struct objects to be signed.\r\n// Throws on errors.\r\nexport function hashEIP712(eip712) {\r\n    try {\r\n        var eip712Domain = TypedDataUtils.hashStruct('EIP712Domain', eip712.domain, eip712.types, SignTypedDataVersion.V4);\r\n        var eip712Hash = TypedDataUtils.hashStruct(eip712.primaryType, eip712.message, eip712.types, SignTypedDataVersion.V4);\r\n        return {\r\n            domain: eip712Domain,\r\n            message: eip712Hash,\r\n        };\r\n    }\r\n    catch (e) {\r\n        throw new Error(\"Could not hash EIP-712 object: \".concat(e));\r\n    }\r\n}\r\n//# sourceMappingURL=encoding.js.map","references":["/Users/steven/work/spidexjs/node_modules/@metamask/eth-sig-util/dist/index.d.ts","/Users/steven/work/spidexjs/packages/eip712/src/encoding/decodeAmino.ts","/Users/steven/work/spidexjs/packages/eip712/src/encoding/decodeProtobuf.ts"],"map":"{\"version\":3,\"file\":\"encoding.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/encoding/encoding.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAA;AAC7E,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAA;AAClD,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAA;AAExD,2EAA2E;AAC3E,sDAAsD;AACtD,MAAM,UAAU,wBAAwB,CAAC,KAAiB;IACxD,IAAI,MAAM,CAAA;IAEV,IAAI,cAAiC,CAAA;IACrC,IAAI,cAAiC,CAAA;IAErC,IAAI;QACF,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAA;KACnC;IAAC,OAAO,CAAC,EAAE;QACV,cAAc,GAAG,CAAU,CAAA;KAC5B;IAED,IAAI;QACF,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAA;KACtC;IAAC,OAAO,CAAC,EAAE;QACV,cAAc,GAAG,CAAU,CAAA;KAC5B;IAED,2CAA2C;IAC3C,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,8FACS,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,+CACpB,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,OAAI,CAAC,CAAA;KACzD;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AAED,uEAAuE;AACvE,oBAAoB;AACpB,MAAM,UAAU,UAAU,CAAC,MAAW;IACpC,IAAI;QACF,IAAM,YAAY,GAAG,cAAc,CAAC,UAAU,CAC5C,cAAc,EACd,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,KAAK,EACZ,oBAAoB,CAAC,EAAE,CACxB,CAAA;QACD,IAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAC1C,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,OAAkC,EACzC,MAAM,CAAC,KAAK,EACZ,oBAAoB,CAAC,EAAE,CACxB,CAAA;QAED,OAAO;YACL,MAAM,EAAE,YAAY;YACpB,OAAO,EAAE,UAAU;SACpB,CAAA;KACF;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,yCAAkC,CAAC,CAAE,CAAC,CAAA;KACvD;AACH,CAAC\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/eip712/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/encoding/encoding.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nexport declare function decodeSignDocToTypedData(bytes: Uint8Array): {\r\n    types: object;\r\n    primaryType: string;\r\n    domain: {\r\n        name: string;\r\n        version: string;\r\n        chainId: number;\r\n        verifyingContract: string;\r\n        salt: string;\r\n    };\r\n    message: object;\r\n};\r\nexport declare function hashEIP712(eip712: any): {\r\n    domain: Buffer;\r\n    message: Buffer;\r\n};\r\n"}}
