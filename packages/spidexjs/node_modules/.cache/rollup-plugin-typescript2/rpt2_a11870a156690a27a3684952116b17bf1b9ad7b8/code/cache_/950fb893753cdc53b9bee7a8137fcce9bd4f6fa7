{"code":"import { createMsgSend as protoMsgSend, createTransaction } from '../../../proto';\r\nimport { createEIP712, generateFee, generateMessage, generateTypes, createMsgSend, MSG_SEND_TYPES, } from '../../../eip712';\r\nexport function createMessageSend(chain, sender, fee, memo, params) {\r\n    // EIP712\r\n    var feeObject = generateFee(fee.amount, fee.denom, fee.gas, sender.accountAddress);\r\n    var types = generateTypes(MSG_SEND_TYPES);\r\n    var msg = createMsgSend(params.amount, params.denom, sender.accountAddress, params.destinationAddress);\r\n    var messages = generateMessage(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);\r\n    var eipToSign = createEIP712(types, chain.chainId, messages);\r\n    // Cosmos\r\n    var msgSend = protoMsgSend(sender.accountAddress, params.destinationAddress, params.amount, params.denom);\r\n    var tx = createTransaction(msgSend, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256k1', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);\r\n    return {\r\n        signDirect: tx.signDirect,\r\n        legacyAmino: tx.legacyAmino,\r\n        eipToSign: eipToSign,\r\n    };\r\n}\r\n//# sourceMappingURL=msgSend.js.map","references":["/Users/steven/work/spidexjs/packages/proto/dist/index.d.ts","/Users/steven/work/spidexjs/packages/eip712/dist/index.d.ts","/Users/steven/work/spidexjs/packages/transactions/src/messages/common.ts"],"map":"{\"version\":3,\"file\":\"msgSend.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../transactions/src/messages/msgSend.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,aAAa,IAAI,YAAY,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAA;AAEjF,OAAO,EACL,YAAY,EACZ,WAAW,EACX,eAAe,EACf,aAAa,EACb,aAAa,EACb,cAAc,GACf,MAAM,iBAAiB,CAAA;AAUxB,MAAM,UAAU,iBAAiB,CAC/B,KAAY,EACZ,MAAc,EACd,GAAQ,EACR,IAAY,EACZ,MAAyB;IAEzB,SAAS;IACT,IAAM,SAAS,GAAG,WAAW,CAC3B,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,KAAK,EACT,GAAG,CAAC,GAAG,EACP,MAAM,CAAC,cAAc,CACtB,CAAA;IACD,IAAM,KAAK,GAAG,aAAa,CAAC,cAAc,CAAC,CAAA;IAC3C,IAAM,GAAG,GAAG,aAAa,CACvB,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,kBAAkB,CAC1B,CAAA;IACD,IAAM,QAAQ,GAAG,eAAe,CAC9B,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,EAC/B,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAC1B,KAAK,CAAC,aAAa,EACnB,IAAI,EACJ,SAAS,EACT,GAAG,CACJ,CAAA;IACD,IAAM,SAAS,GAAG,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;IAE9D,SAAS;IACT,IAAM,OAAO,GAAG,YAAY,CAC1B,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,kBAAkB,EACzB,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,KAAK,CACb,CAAA;IACD,IAAM,EAAE,GAAG,iBAAiB,CAC1B,OAAO,EACP,IAAI,EACJ,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,KAAK,EACT,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,EACrB,cAAc,EACd,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,aAAa,EACpB,KAAK,CAAC,aAAa,CACpB,CAAA;IAED,OAAO;QACL,UAAU,EAAE,EAAE,CAAC,UAAU;QACzB,WAAW,EAAE,EAAE,CAAC,WAAW;QAC3B,SAAS,WAAA;KACV,CAAA;AACH,CAAC\"}","dts":{"name":"/Users/steven/work/spidexjs/packages/spidexjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/transactions/src/messages/msgSend.d.ts","writeByteOrderMark":false,"text":"import { Chain, Fee, Sender } from './common';\r\nexport interface MessageSendParams {\r\n    destinationAddress: string;\r\n    amount: string;\r\n    denom: string;\r\n}\r\nexport declare function createMessageSend(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MessageSendParams): {\r\n    signDirect: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    legacyAmino: {\r\n        body: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.TxBody;\r\n        authInfo: import(\"../../../proto/dist/proto/cosmos/tx/v1beta1/tx\").cosmos.tx.v1beta1.AuthInfo;\r\n        signBytes: string;\r\n    };\r\n    eipToSign: {\r\n        types: object;\r\n        primaryType: string;\r\n        domain: {\r\n            name: string;\r\n            version: string;\r\n            chainId: number;\r\n            verifyingContract: string;\r\n            salt: string;\r\n        };\r\n        message: object;\r\n    };\r\n};\r\n"}}
