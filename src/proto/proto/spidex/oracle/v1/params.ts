// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.7
 * source: spidex/oracle/v1/params.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace pngfi.spidex.oracle.v1 {
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            scriptId?: number;
            sourceChannel?: string;
            multiplier?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("scriptId" in data && data.scriptId != undefined) {
                    this.scriptId = data.scriptId;
                }
                if ("sourceChannel" in data && data.sourceChannel != undefined) {
                    this.sourceChannel = data.sourceChannel;
                }
                if ("multiplier" in data && data.multiplier != undefined) {
                    this.multiplier = data.multiplier;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scriptId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set scriptId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sourceChannel() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sourceChannel(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get multiplier() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set multiplier(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            admin?: string;
            scriptId?: number;
            sourceChannel?: string;
            multiplier?: number;
        }): Params {
            const message = new Params({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.scriptId != null) {
                message.scriptId = data.scriptId;
            }
            if (data.sourceChannel != null) {
                message.sourceChannel = data.sourceChannel;
            }
            if (data.multiplier != null) {
                message.multiplier = data.multiplier;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                scriptId?: number;
                sourceChannel?: string;
                multiplier?: number;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.scriptId != null) {
                data.scriptId = this.scriptId;
            }
            if (this.sourceChannel != null) {
                data.sourceChannel = this.sourceChannel;
            }
            if (this.multiplier != null) {
                data.multiplier = this.multiplier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.scriptId != 0)
                writer.writeUint64(2, this.scriptId);
            if (this.sourceChannel.length)
                writer.writeString(3, this.sourceChannel);
            if (this.multiplier != 0)
                writer.writeUint64(4, this.multiplier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.scriptId = reader.readUint64();
                        break;
                    case 3:
                        message.sourceChannel = reader.readString();
                        break;
                    case 4:
                        message.multiplier = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
}
