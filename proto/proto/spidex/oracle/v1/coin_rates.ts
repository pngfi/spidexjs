// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.7
 * source: spidex/oracle/v1/coin_rates.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace pngfi.spidex.oracle.v1 {
    export class CoinRatesCallData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            symbols?: string[];
            multiplier?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbols" in data && data.symbols != undefined) {
                    this.symbols = data.symbols;
                }
                if ("multiplier" in data && data.multiplier != undefined) {
                    this.multiplier = data.multiplier;
                }
            }
        }
        get symbols() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set symbols(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get multiplier() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set multiplier(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            symbols?: string[];
            multiplier?: number;
        }): CoinRatesCallData {
            const message = new CoinRatesCallData({});
            if (data.symbols != null) {
                message.symbols = data.symbols;
            }
            if (data.multiplier != null) {
                message.multiplier = data.multiplier;
            }
            return message;
        }
        toObject() {
            const data: {
                symbols?: string[];
                multiplier?: number;
            } = {};
            if (this.symbols != null) {
                data.symbols = this.symbols;
            }
            if (this.multiplier != null) {
                data.multiplier = this.multiplier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.symbols.length)
                writer.writeRepeatedString(1, this.symbols);
            if (this.multiplier != 0)
                writer.writeUint64(2, this.multiplier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoinRatesCallData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoinRatesCallData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.multiplier = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoinRatesCallData {
            return CoinRatesCallData.deserialize(bytes);
        }
    }
    export class CoinRatesResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rates?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rates" in data && data.rates != undefined) {
                    this.rates = data.rates;
                }
            }
        }
        get rates() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set rates(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            rates?: number[];
        }): CoinRatesResult {
            const message = new CoinRatesResult({});
            if (data.rates != null) {
                message.rates = data.rates;
            }
            return message;
        }
        toObject() {
            const data: {
                rates?: number[];
            } = {};
            if (this.rates != null) {
                data.rates = this.rates;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rates.length)
                writer.writePackedUint64(1, this.rates);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoinRatesResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoinRatesResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rates = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoinRatesResult {
            return CoinRatesResult.deserialize(bytes);
        }
    }
}
