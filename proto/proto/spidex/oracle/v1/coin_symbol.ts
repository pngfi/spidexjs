// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.7
 * source: spidex/oracle/v1/coin_symbol.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace pngfi.spidex.oracle.v1 {
    export class CoinSymbol extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            symbol?: string;
            isDeleted?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("isDeleted" in data && data.isDeleted != undefined) {
                    this.isDeleted = data.isDeleted;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get isDeleted() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isDeleted(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            symbol?: string;
            isDeleted?: boolean;
        }): CoinSymbol {
            const message = new CoinSymbol({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.isDeleted != null) {
                message.isDeleted = data.isDeleted;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                symbol?: string;
                isDeleted?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.isDeleted != null) {
                data.isDeleted = this.isDeleted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.symbol.length)
                writer.writeString(2, this.symbol);
            if (this.isDeleted != false)
                writer.writeBool(3, this.isDeleted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoinSymbol {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoinSymbol();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        message.isDeleted = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoinSymbol {
            return CoinSymbol.deserialize(bytes);
        }
    }
}
